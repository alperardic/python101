from mysql.connector import errorcode
import mysql.connector
import configparser
import logging
import os

dir_path = os.path.dirname(os.path.realpath(__file__))
config = configparser.ConfigParser()
config.read(f'{dir_path}/python101.cfg')
logging.basicConfig(filename=config['DEFAULT']['log_file'], level=config['DEFAULT']['log_level'])

def connect():
    return mysql.connector.connect(
        user=config['DEFAULT']['mysql_user'],
        password=config['DEFAULT']['mysql_password'],
        host=config['DEFAULT']['mysql_host'],
        database=config['DEFAULT']['mysql_database'],
        auth_plugin='mysql_native_password')  

def select():
    try:
        mysqldb = connect()
        cursor =  mysqldb.cursor(buffered=True)
        query = f"SELECT * FROM {config['DEFAULT']['mysql_database']}.{config['DEFAULT']['mysql_table']};"
        cursor.execute(query)
        response = cursor.fetchall()
        mysqldb.close()
    except mysql.connector.Error as e:
        if(e.errno == errorcode.ER_ACCESS_DENIED_ERROR):
            logging.error(str(e))
            return("AUTH ERROR! PLEASE CHECK LOG FILE.")
            
        elif(e.errno == errorcode.ER_BAD_DB_ERROR):
            logging.error(str(e))
            return("DB NOT EXIST! PLEASE CHECK LOG FILE.")
            
        else:
            logging.error(str(e))
            return("SOME ERROR OCCURED! PLEASE CHECK LOG FILE.")
            
    return(response)

def insert(name, lastname, email):
    try:
        mysqldb = connect()
        cursor =  mysqldb.cursor(buffered=True)
        query = f"""INSERT INTO 
        akademi.python101 (name, lastname, email) VALUES
        ('{name}', '{lastname}', '{email}');"""
        cursor.execute(query)
        mysqldb.commit()
        mysqldb.close()
    except mysql.connector.Error as e:
        if(e.errno == errorcode.ER_ACCESS_DENIED_ERROR):
            logging.error(str(e))
            return("AUTH ERROR! PLEASE CHECK LOG FILE.")
            
        elif(e.errno == errorcode.ER_BAD_DB_ERROR):
            logging.error(str(e))
            return("DB NOT EXIST! PLEASE CHECK LOG FILE.")
            
        else:
            logging.error(str(e))
            return("SOME ERROR OCCURED! PLEASE CHECK LOG FILE.")
            
    return("SUCCESS")

def update():
    try:
        mysqldb = connect()
        cursor =  mysqldb.cursor(buffered=True)
        query = """UPDATE akademi.python101 set name= 'alper', lastname='ardic',
         email='alpernmc25@gmail.com' where id=2;  """
        cursor.execute(query)
        mysqldb.commit()
        mysqldb.close()
    except mysql.connector.Error as e:
        if(e.errno == errorcode.ER_ACCESS_DENIED_ERROR):
            logging.error(str(e))
            return("AUTH ERROR! PLEASE CHECK LOG FILE.")
            
        elif(e.errno == errorcode.ER_BAD_DB_ERROR):
            logging.error(str(e))
            return("DB NOT EXIST! PLEASE CHECK LOG FILE.")
            
        else:
            logging.error(str(e))
            return("SOME ERROR OCCURED! PLEASE CHECK LOG FILE.")
            
            
    return("SUCCESS")


def delete(number):
    try:
        mysqldb = connect()
        cursor =  mysqldb.cursor(buffered=True)
        query = f""" DELETE FROM {config['DEFAULT']['mysql_database']}.{config['DEFAULT']['mysql_table']} WHERE ID = {number}; """
        cursor.execute(query)
        mysqldb.commit()
        mysqldb.close()
    except mysql.connector.Error as e:
        if(e.errno == errorcode.ER_ACCESS_DENIED_ERROR):
            logging.error(str(e))
            return("AUTH ERROR! PLEASE CHECK LOG FILE.")
            
        elif(e.errno == errorcode.ER_BAD_DB_ERROR):
            logging.error(str(e))
            return("DB NOT EXIST! PLEASE CHECK LOG FILE.")
            
        else:
            logging.error(str(e))
            return("SOME ERROR OCCURED! PLEASE CHECK LOG FILE.")
            
            
    return("SUCCESS")

            

def main():
    response_update=update()
    response_insert=insert('alper123','ardic123','alper12312312@gmail.com')
    response_delete=delete()
    response_select=select()
    
    return (response_select, response_delete)

if __name__ == "__main__":
    print(main())
    
